/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,51],$V5=[1,52],$V6=[1,53],$V7=[1,39],$V8=[1,46],$V9=[1,54],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,27],$Vi=[1,26],$Vj=[1,25],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,38],$Vq=[1,37],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[1,48],$Vy=[1,50],$Vz=[1,2,5,22,24,25,29,30,31,35,38,39,40,45,46,48,49,51,56,57,58,64,67,68,69,75,76,77,78,79,89,102,104,105,106,107,108,109,111,112],$VA=[26,27,39,42,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$VB=[2,115],$VC=[1,73],$VD=[1,74],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,76],$VK=[1,77],$VL=[1,78],$VM=[1,79],$VN=[1,80],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[1,84],$VS=[1,85],$VT=[1,86],$VU=[1,87],$VV=[1,88],$VW=[1,89],$VX=[1,90],$VY=[2,113],$VZ=[1,100],$V_=[1,103],$V$=[8,26,27,37,39,42,53,72,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$V01=[1,120],$V11=[40,75,76,77,78,79,112],$V21=[1,125],$V31=[1,126],$V41=[2,101],$V51=[2,102],$V61=[35,38,89,102,104,105,106,107,108,109,111,112],$V71=[2,63],$V81=[1,146],$V91=[1,145],$Va1=[2,64],$Vb1=[1,148],$Vc1=[1,147],$Vd1=[8,26,27,37,39,42,53,70,72,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103],$Ve1=[8,37,39,42,53,72,73,81,82,83,84,93,94,95,96,97,98,99,100,101],$Vf1=[1,168],$Vg1=[37,39,42],$Vh1=[2,84],$Vi1=[8,37,39,42,53,72,73,81,82,83,84,88,89,93,94,95,96,97,98,99,100,101],$Vj1=[8,37,39,42,53,72,73,81,82,83,84,88,89,90,91,93,94,95,96,97,98,99,100,101],$Vk1=[8,37,39,42,53,72,73,81,82,83,84],$Vl1=[8,37,39,42,53,72,73,81,82,83,84,93,94,95,96,97,98,99,100],$Vm1=[37,42],$Vn1=[2,37],$Vo1=[1,195],$Vp1=[1,207],$Vq1=[1,208],$Vr1=[72,75,76,77,78,79,112],$Vs1=[1,223],$Vt1=[1,224],$Vu1=[39,67,68];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PROG":3,"SENTS":4,"eof":5,"SENT":6,"ASIGNACION":7,"ptoComa":8,"DECLARACION":9,"ESTRUCTURA":10,"EVALUAR_SI":11,"SI":12,"REPETIR_MIENTRAS":13,"HACER":14,"CICLO_DOBLE_CONDICION":15,"REPETIR":16,"REPETIR_CONTANDO":17,"ENCICLAR":18,"CONTADOR":19,"FUNCION":20,"LLAMADA":21,"retornar":22,"E":23,"romper":24,"continuar":25,"inc":26,"dec":27,"VISIBILIDAD":28,"publico":29,"protegido":30,"privado":31,"FUNC":32,"TIPO":33,"ID":34,"parenA":35,"PARAMS":36,"parenC":37,"llaveA":38,"llaveC":39,"vacio":40,"CTOR":41,"coma":42,"PARAM":43,"EXPS":44,"repetir_mientras":45,"hacer":46,"mientras":47,"ciclo_doble_condicion":48,"repetir":49,"hasta_que":50,"repetir_contando":51,"variable":52,"dosPtos":53,"desde":54,"hasta":55,"enciclar":56,"contador":57,"si":58,"OPCION_SI":59,"fin_si":60,"VALOR_SI":61,"es_verdadero":62,"es_falso":63,"evaluar_si":64,"CASOS":65,"CASO":66,"es_igual_a":67,"defecto":68,"estructura":69,"corcheteA":70,"DECLARACIONES":71,"corcheteC":72,"asigna":73,"TIPO_NATIVO":74,"entero":75,"decimal":76,"booleano":77,"caracter":78,"cadena":79,"SIGNO_ASIG":80,"masI":81,"menosI":82,"porI":83,"entreI":84,"POSICIONES":85,"POSICION":86,"ARRAY":87,"mas":88,"menos":89,"por":90,"entre":91,"potencia":92,"igual":93,"diferente":94,"mayor":95,"menor":96,"mayorI":97,"menorI":98,"o":99,"xor":100,"y":101,"no":102,"pto":103,"booleanoLit":104,"enteroLit":105,"decimalLit":106,"cadenaLit":107,"caracterLit":108,"nadaWord":109,"nada":110,"errorLex":111,"id":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",8:"ptoComa",22:"retornar",24:"romper",25:"continuar",26:"inc",27:"dec",29:"publico",30:"protegido",31:"privado",35:"parenA",37:"parenC",38:"llaveA",39:"llaveC",40:"vacio",42:"coma",45:"repetir_mientras",46:"hacer",47:"mientras",48:"ciclo_doble_condicion",49:"repetir",50:"hasta_que",51:"repetir_contando",52:"variable",53:"dosPtos",54:"desde",55:"hasta",56:"enciclar",57:"contador",58:"si",60:"fin_si",62:"es_verdadero",63:"es_falso",64:"evaluar_si",67:"es_igual_a",68:"defecto",69:"estructura",70:"corcheteA",72:"corcheteC",73:"asigna",75:"entero",76:"decimal",77:"booleano",78:"caracter",79:"cadena",81:"masI",82:"menosI",83:"porI",84:"entreI",88:"mas",89:"menos",90:"por",91:"entre",92:"potencia",93:"igual",94:"diferente",95:"mayor",96:"menor",97:"mayorI",98:"menorI",99:"o",100:"xor",101:"y",102:"no",103:"pto",104:"booleanoLit",105:"enteroLit",106:"decimalLit",107:"cadenaLit",108:"caracterLit",109:"nadaWord",110:"nada",111:"errorLex",112:"id"},
productions_: [0,[3,1],[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,2],[6,2],[6,3],[6,3],[6,2],[6,2],[28,1],[28,1],[28,1],[20,2],[20,1],[32,8],[32,8],[32,8],[41,7],[36,3],[36,1],[36,0],[43,2],[43,2],[21,4],[21,3],[13,7],[14,8],[15,9],[16,8],[17,17],[17,16],[18,5],[19,7],[12,6],[12,7],[59,4],[61,1],[61,1],[11,7],[65,2],[65,1],[66,4],[66,3],[10,5],[71,3],[71,2],[9,2],[9,2],[9,4],[9,4],[33,1],[74,1],[74,1],[74,1],[74,1],[74,1],[7,3],[80,1],[80,1],[80,1],[80,1],[80,1],[85,2],[85,1],[86,3],[87,3],[44,3],[44,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,2],[23,3],[23,3],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[23,1],[23,1],[23,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0] 
break;
case 2:
 return $$[$0-1] 
break;
case 3: case 56: case 79:
 var arr = $$[$0-1]; this.$ = arr.concat($$[$0]); 
break;
case 4: case 36: case 57: case 80: case 84:
 this.$ =  [$$[$0]] 
break;
case 5: case 6: case 7: case 11: case 13: case 18: case 81: case 104:
 this.$ = $$[$0-1] 
break;
case 8: case 9: case 10: case 12: case 14: case 15: case 16: case 17: case 30: case 113: case 114: case 115:
 this.$ = $$[$0] 
break;
case 19:
 this.$ = { tipo:'retornar', hijos:[$$[$0-1]], linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0-2].last_line, columnaF:  _$[$0-2].last_column  } 
break;
case 20:
 this.$ = { tipo:'romper', val: yytext, linea:  yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0-1].last_line, columnaF:  _$[$0-1].last_column  } 
break;
case 21:
 this.$ = { tipo:'continuar', val: yytext, linea:  yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0-1].last_line, columnaF:  _$[$0-1].last_column  } 
break;
case 22:
 this.$ = { tipo:'++',    hijos:[$$[$0-2]],  linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0-1].last_line, columnaF:  _$[$0-1].last_column } 
break;
case 23:
 this.$ = { tipo:'--',    hijos:[$$[$0-2]],  linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0-1].last_line, columnaF:  _$[$0-1].last_column } 
break;
case 24: case 25:
 this.$ = { tipo:'errorSint', val: yytext, linea: yylineno, columna:  _$[$0-1].first_column} 
break;
case 26: case 27: case 28: case 53: case 54: case 68: case 69: case 70: case 71: case 72:
 this.$ = yytext.toLowerCase() 
break;
case 29:
 objFun = $$[$0]; objFun.visibilidad = $$[$0-1]; this.$ = objFun; 
break;
case 31: case 32: case 33:
 this.$ = { tipo:'funcion', hijos: [$$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]],  linea: yylineno, columna:  _$[$0-7].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 34:
 this.$ = { tipo:'ctor', hijos: [$$[$0-6], $$[$0-4], $$[$0-1]],  linea: yylineno, columna:  _$[$0-6].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 35: case 83:
 var arr = $$[$0-2]; this.$ = arr.concat($$[$0]); 
break;
case 37:
 this.$ =  [] 
break;
case 38: case 39:
 this.$ = { tipo:'param', hijos: [$$[$0-1], $$[$0]],  linea:  yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 40:
 this.$ = { tipo:'llamada', hijos: [$$[$0-3], $$[$0-2]],  linea: yylineno, columna:  _$[$0-3].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 41:
 this.$ = { tipo:'llamada', hijos: [$$[$0-2]],  linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 42:
 this.$ = { tipo:'repetir_mientras', hijos: [$$[$0-4], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-6].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 43:
 this.$ = { tipo:'hacer', hijos: [$$[$0-5], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-7].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column }; 
break;
case 44:
 this.$ = { tipo:'ciclo_doble_condicion', hijos: [$$[$0-6], $$[$0-4], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-8].first_column, lineaF:  _$[$0-2].last_line, columnaF:  _$[$0-2].last_column } 
break;
case 45:
 this.$ = { tipo:'repetir', hijos: [$$[$0-5], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-7].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column }; 
break;
case 46:
 this.$ = { tipo:'repetir_contando', hijos: [$$[$0-12], $$[$0-8], $$[$0-4], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-16].first_column, lineaF:  _$[$0-10].last_line, columnaF:  _$[$0-10].last_column } 
break;
case 47:
 this.$ = { tipo:'repetir_contando', hijos: [$$[$0-11], $$[$0-7], $$[$0-3], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-15].first_column, lineaF:  _$[$0-9].last_line, columnaF:  _$[$0-9].last_column } 
break;
case 48:
 this.$ = { tipo:'enciclar', hijos: [$$[$0-3], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-4].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 49:
 this.$ = { tipo:'contador', hijos: [$$[$0-4], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-6].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 50:
 this.$ = { tipo:'si', hijos: [$$[$0-3], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-5].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 51:
 this.$ = { tipo:'si', hijos: [$$[$0-4], $$[$0-2], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-6].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 52:
 this.$ = { tipo:$$[$0-3], hijos: [$$[$0-1]],  linea:  yylineno, columna:  _$[$0-3].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 55:
 this.$ = { tipo:'evaluar_si', hijos: [$$[$0-4], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-6].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 58:
 this.$ = { tipo:'caso', hijos: [$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-3].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 59:
 this.$ = { tipo:'defecto', hijos: [$$[$0]],   linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 60:
 this.$ = { tipo:'estructura', hijos: [$$[$0-3], $$[$0-1]],  linea:  yylineno, columna:  _$[$0-4].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 61:
 var arr = $$[$0-2]; this.$ = arr.concat($$[$0-1]); 
break;
case 62:
 this.$ =  [$$[$0-1]] 
break;
case 63: case 64:
 this.$ = { tipo:'decl', hijos:[$$[$0-1], $$[$0]],     linea:  yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 65: case 66:
 this.$ = { tipo:'decl', hijos:[$$[$0-3], $$[$0-2]],     linea:  yylineno, columna:  _$[$0-3].first_column, lineaF:  _$[$0-2].last_line, columnaF:  _$[$0-2].last_column } 
break;
case 67:
 this.$ = { tipo:'tipo', val: $$[$0], linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 73:
 this.$ = { tipo:$$[$0-1], hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 74: case 75: case 76: case 77: case 78:
 this.$ = yytext 
break;
case 82:
 this.$ = { tipo:'array', val:[$$[$0-1]],  linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 85:
 this.$ = { tipo:'+', hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 86:
 this.$ = { tipo:'-', hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 87:
 this.$ = { tipo:'*', hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 88:
 this.$ = { tipo:'/', hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 89:
 this.$ = { tipo:'^', hijos:[$$[$0-2], $$[$0]],  linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 90:
 this.$ = { tipo:'==',  hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 91:
 this.$ = { tipo:'!=',  hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 92:
 this.$ = { tipo:'>',   hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 93:
 this.$ = { tipo:'<',   hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 94:
 this.$ = { tipo:'>=',  hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 95:
 this.$ = { tipo:'<=',  hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 96:
 this.$ = { tipo:'||',    hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 97:
 this.$ = { tipo:'??',    hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 98:
 this.$ = { tipo:'&&',    hijos:[$$[$0-2], $$[$0]], linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 99:
 this.$ = { tipo:'!',     hijos:[$$[$0]],     linea: yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 100:
 this.$ = { tipo:'-',     hijos:[$$[$0]],     linea: yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 101:
 this.$ = { tipo:'++',    hijos:[$$[$0-1]],  linea: yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 102:
 this.$ = { tipo:'--',    hijos:[$$[$0-1]],  linea: yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 103:
 this.$ = { tipo:'.',    hijos:[$$[$0-2], $$[$0]],  linea: yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 105:
 this.$ = { tipo:'[]',    hijos:[$$[$0-1], $$[$0]],  linea: yylineno, columna:  _$[$0-1].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
case 106:
 this.$ = { tipo:'booleanoLit', val: yytext.toLowerCase() == 'verdadero', linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 107:
 this.$ = { tipo:'enteroLit'  , val: parseInt(yytext)     , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 108:
 this.$ = { tipo:'decimalLit' , val: parseFloat(yytext)   , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 109:
 this.$ = { tipo:'cadenaLit'  , val: yytext               , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 110:
 this.$ = { tipo:'caracterLit', val: yytext.charCodeAt(0) , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 111:
 this.$ = { tipo:'nada',        val: null                 , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 112:
 this.$ = { tipo:'nada',        val: null                 , linea:  yylineno, columna:  _$[$0-2].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 116:
 this.$ = { tipo:'errorLex'   , val: yytext               , linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column  } 
break;
case 117:
 this.$ = { tipo:'id', val: yytext.toLowerCase(), linea:  yylineno, columna:  _$[$0].first_column, lineaF:  _$[$0].last_line, columnaF:  _$[$0].last_column } 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{1:[3]},{1:[2,1],2:$V0,5:[1,60],6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,4]),{8:[1,62]},{8:[1,63]},{8:[1,64]},o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),{8:[1,65]},o($Vz,[2,12]),{8:[1,66]},o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),o($VA,$VB,{8:[1,67]}),{21:70,23:68,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{8:[1,71]},{8:[1,72]},{26:$VC,27:$VD,73:$VE,80:75,81:$VF,82:$VG,83:$VH,84:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{5:[1,97],8:[1,96]},{34:98,112:$Vy},o($VA,$VY,{34:99,85:101,86:102,35:$VZ,70:$V_,112:$Vy}),{34:104,112:$Vy},{35:[1,105]},{35:[1,106]},{35:[1,107]},{38:[1,108]},{35:[1,109]},{38:[1,110]},{35:[1,111]},{34:112,112:$Vy},{35:[1,113]},{32:114,33:115,34:116,40:$V9,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy},o($Vz,[2,30]),{21:70,23:117,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:118,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:119,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),{21:70,23:122,34:69,35:$V7,38:$V8,44:121,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$V01,111:$Vx,112:$Vy},o($V$,[2,114]),o($V$,[2,116]),{112:[2,67]},o([8,26,27,35,37,38,39,42,53,70,72,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,112],[2,117]),o($V11,[2,26]),o($V11,[2,27]),o($V11,[2,28]),{34:123,112:$Vy},{112:[2,68]},{112:[2,69]},{112:[2,70]},{112:[2,71]},{112:[2,72]},{1:[2,2]},o($Vz,[2,3]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,11]),o($Vz,[2,13]),o($Vz,[2,18]),{8:[1,124],26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},o($V$,$VY,{85:101,86:102,35:$VZ,70:$V_}),o($V$,$VB),o($Vz,[2,20]),o($Vz,[2,21]),o($VA,$V41,{8:[1,127]}),o($VA,$V51,{8:[1,128]}),{21:70,23:129,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:130,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:131,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:132,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:133,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:134,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:135,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:136,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:137,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:138,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:139,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:140,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:141,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:142,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:143,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:144,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($V61,[2,74]),o($V61,[2,75]),o($V61,[2,76]),o($V61,[2,77]),o($V61,[2,78]),o($Vz,[2,24]),o($Vz,[2,25]),{8:$V71,35:$V81,73:$V91},{8:$Va1,35:$Vb1,73:$Vc1},{21:70,23:122,34:69,35:$V7,37:[1,150],38:$V8,44:149,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($V$,[2,105],{86:151,70:$V_}),o($Vd1,[2,80]),{21:70,23:152,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{70:[1,153]},{21:70,23:154,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:155,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:156,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,4:157,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:158,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,4:159,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{52:[1,160]},{38:[1,161]},{21:70,23:162,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,29]),{34:163,112:$Vy},{34:164,112:$Vy},o($Ve1,[2,99],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,103:$VX}),o([8,26,27,37,39,42,53,72,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101],[2,100],{103:$VX}),{26:$V21,27:$V31,37:[1,165],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{39:[1,166]},{39:[1,167],42:$Vf1},o($Vg1,$Vh1,{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX}),{35:[1,169]},o($Vz,[2,19]),o($V$,$V41),o($V$,$V51),o($Vz,[2,22]),o($Vz,[2,23]),{8:[2,73],26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},o($Vi1,[2,85],{26:$V21,27:$V31,90:$VL,91:$VM,92:$VN,103:$VX}),o($Vi1,[2,86],{26:$V21,27:$V31,90:$VL,91:$VM,92:$VN,103:$VX}),o($Vj1,[2,87],{26:$V21,27:$V31,92:$VN,103:$VX}),o($Vj1,[2,88],{26:$V21,27:$V31,92:$VN,103:$VX}),o([8,37,39,42,53,72,73,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101],[2,89],{26:$V21,27:$V31,103:$VX}),o($Vk1,[2,90],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vk1,[2,91],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vk1,[2,92],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vk1,[2,93],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vk1,[2,94],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vk1,[2,95],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vl1,[2,96],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,101:$VW,103:$VX}),o($Vl1,[2,97],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,101:$VW,103:$VX}),o($Ve1,[2,98],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,103:$VX}),o($V$,[2,103]),{21:70,23:170,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vm1,$Vn1,{74:49,36:171,43:172,33:173,34:174,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy}),{21:70,23:175,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vm1,$Vn1,{74:49,43:172,33:173,34:174,36:176,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy}),{37:[1,177],42:$Vf1},o($V$,[2,41]),o($Vd1,[2,79]),{26:$V21,27:$V31,72:[1,178],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{9:180,33:181,34:182,71:179,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy},{26:$V21,27:$V31,37:[1,183],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{26:$V21,27:$V31,37:[1,184],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{26:$V21,27:$V31,37:[1,185],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,186],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{26:$V21,27:$V31,42:[1,187],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,188],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{53:[1,189]},{2:$V0,4:190,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{26:$V21,27:$V31,37:[1,191],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{35:$V81},{35:$Vb1},o($V$,[2,104]),o($V$,[2,112]),o($V$,[2,82]),{21:70,23:192,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vm1,$Vn1,{74:49,43:172,33:173,34:174,36:193,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy}),{8:[2,66],26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{37:[1,194],42:$Vo1},o($Vm1,[2,36]),{34:196,112:$Vy},{34:197,112:$Vy},{8:[2,65],26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{37:[1,198],42:$Vo1},o($V$,[2,40]),o($Vd1,[2,81]),{9:200,33:181,34:182,72:[1,199],74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy},{8:[1,201]},{34:202,112:$Vy},{34:203,112:$Vy},{38:[1,204]},{59:205,61:206,62:$Vp1,63:$Vq1},{38:[1,209]},{47:[1,210]},{21:70,23:211,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{50:[1,212]},{34:213,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,214],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{38:[1,215]},o($Vg1,[2,83],{26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX}),{37:[1,216],42:$Vo1},{38:[1,217]},{33:173,34:174,43:218,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,112:$Vy},o($Vm1,[2,38]),o($Vm1,[2,39]),{38:[1,219]},{8:[2,60]},{8:[1,220]},o($Vr1,[2,62]),{8:$V71,73:$V91},{8:$Va1,73:$Vc1},{65:221,66:222,67:$Vs1,68:$Vt1},{59:226,60:[1,225],61:206,62:$Vp1,63:$Vq1},{38:[1,227]},{38:[2,53]},{38:[2,54]},{2:$V0,4:228,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{35:[1,229]},{26:$V21,27:$V31,37:[1,230],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{35:[1,231]},{8:[1,232]},o($Vz,[2,48]),{2:$V0,4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{38:[1,234]},{2:$V0,4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vm1,[2,35]),{2:$V0,4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vr1,[2,61]),{39:[1,237],66:238,67:$Vs1,68:$Vt1},o($Vu1,[2,57]),{21:70,23:239,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{53:[1,240]},o($Vz,[2,50]),{60:[1,241]},{2:$V0,4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,243],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{21:70,23:244,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{38:[1,245]},{21:70,23:246,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{54:[1,247]},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,248],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,4:249,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,250],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,251],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,55]),o($Vu1,[2,56]),{26:$V21,27:$V31,53:[1,252],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{2:$V0,4:253,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,51]),{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,254],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,42]),{26:$V21,27:$V31,37:[1,255],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{2:$V0,4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{26:$V21,27:$V31,37:[1,257],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{53:[1,258]},o($Vz,[2,49]),{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,259],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,31]),o($Vz,[2,32]),{2:$V0,4:260,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vu1,[2,59],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:21,33:23,34:24,28:35,32:36,87:47,74:49,6:61,2:$V0,22:$V1,24:$V2,25:$V3,29:$V4,30:$V5,31:$V6,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy}),o([60,62,63],[2,52]),{8:[2,43]},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,261],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{8:[2,45]},{21:70,23:262,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o($Vz,[2,33]),o($Vu1,[2,58],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,23:21,33:23,34:24,28:35,32:36,87:47,74:49,6:61,2:$V0,22:$V1,24:$V2,25:$V3,29:$V4,30:$V5,31:$V6,35:$V7,38:$V8,40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy}),o($Vz,[2,44]),{8:[1,263],26:$V21,27:$V31,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{55:[1,264]},{53:[1,265]},{21:70,23:266,34:69,35:$V7,38:$V8,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{26:$V21,27:$V31,37:[1,267],88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX},{2:$V0,4:269,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:[1,268],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,4:270,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:271,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,40:$V9,44:121,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,110:$V01,111:$Vx,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,272],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},{2:$V0,6:61,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,23:21,24:$V2,25:$V3,28:35,29:$V4,30:$V5,31:$V6,32:36,33:23,34:24,35:$V7,38:$V8,39:[1,273],40:$V9,45:$Va,46:$Vb,48:$Vc,49:$Vd,51:$Ve,56:$Vf,57:$Vg,58:$Vh,64:$Vi,69:$Vj,74:49,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo,87:47,89:$Vp,102:$Vq,104:$Vr,105:$Vs,106:$Vt,107:$Vu,108:$Vv,109:$Vw,111:$Vx,112:$Vy},o([39,42],$Vh1,{80:75,26:$VC,27:$VD,73:$VE,81:$VF,82:$VG,83:$VH,84:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,103:$VX}),o($Vz,[2,47]),o($Vz,[2,46])],
defaultActions: {49:[2,67],55:[2,68],56:[2,69],57:[2,70],58:[2,71],59:[2,72],60:[2,2],199:[2,60],207:[2,53],208:[2,54],255:[2,43],257:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    function addChildren(node, child){
      node.splice(2,1,child); 
      return node;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState('ML_COMMENT');
break;
case 1:this.popState();
break;
case 2:/* Se ignora */
break;
case 3:/* Se ignora */
break;
case 4:throw "Final inesperado de archivo (comentario no cerrado)";
break;
case 5: this.pushState('STRING'); limpiarString(); 
break;
case 6: 
							this.popState(); 
							yy_.yytext=getString(); 

							if (yy_.yytext == "\\0")
                          		return 110;
							
							return 107; 
						
break;
case 7: appendString(yy_.yytext); 
break;
case 8: appendString(yy_.yytext); 
break;
case 9: appendString(yy_.yytext); yy_.yytext=getString(); return 111; 
break;
case 10: this.pushState('CHAR'); limpiarString(); 
break;
case 11: 
                          this.popState(); 
                          yy_.yytext=getString();
                          if (yy_.yytext.length == 2 && yy_.yytext.startsWith('\\')){
                          	if (yy_.yytext == "\\0")
                          		return 110;
                          	else if (yy_.yytext == "\\n"){
                          		yy_.yytext = '\n';
                          		return 108
                          	}
                          	else if (yy_.yytext == "\\t"){
                          		yy_.yytext = '\t';
                          		return 108
                          	}
                          	return 111 //secuencia de escape no válida
                          }
                          else if (yy_.yytext.length == 1)
                            return 108;
                          else
                            return 111; 
                        
break;
case 12: appendString(yy_.yytext); 
break;
case 13: appendString(yy_.yytext); 
break;
case 14: appendString(yy_.yytext); yy_.yytext=getString(); return 111; 
break;
case 15:/* ignorar comentario de línea */
break;
case 16:/* skip whitespace */
break;
case 17:return 106
break;
case 18:return 105
break;
case 19:return 104
break;
case 20:return 104
break;
case 21:return 77
break;
case 22:return 75
break;
case 23:return 76
break;
case 24:return 78
break;
case 25:return 79
break;
case 26:return 40
break;
case 27:return 109
break;
case 28:return 24
break;
case 29:return 25
break;
case 30:return 22
break;
case 31:return 69
break;
case 32:return 58
break;
case 33:return 60
break;
case 34:return 62
break;
case 35:return 63
break;
case 36:return 45
break;
case 37:return 47
break;
case 38:return 46
break;
case 39:return 49
break;
case 40:return 51
break;
case 41:return 50
break;
case 42:return 48
break;
case 43:return 54
break;
case 44:return 55
break;
case 45:return 52
break;
case 46:return 56
break;
case 47:return 57
break;
case 48:return 64
break;
case 49:return 67
break;
case 50:return 68
break;
case 51:return 29
break;
case 52:return 31
break;
case 53:return 30
break;
case 54:return 'sobrescribir'
break;
case 55:return 112;
break;
case 56:return 26;
break;
case 57:return 27;
break;
case 58:return 81;
break;
case 59:return 83;
break;
case 60:return 82;
break;
case 61:return 84;
break;
case 62:return 97;
break;
case 63:return 98;
break;
case 64:return 95;
break;
case 65:return 96;
break;
case 66:return 94;
break;
case 67:return 93;
break;
case 68:return 99;
break;
case 69:return 100;
break;
case 70:return 101;
break;
case 71:return 102;
break;
case 72:return 73;
break;
case 73:return 88;
break;
case 74:return 89;
break;
case 75:return 90;
break;
case 76:return 91;
break;
case 77:return 92;
break;
case 78:return 103;
break;
case 79:return 38;
break;
case 80:return 39;
break;
case 81:return 35;
break;
case 82:return 37;
break;
case 83:return 70;
break;
case 84:return 72;
break;
case 85:return 42;
break;
case 86:return 8;
break;
case 87:return 53;
break;
case 88:return 111
break;
case 89:return 111
break;
case 90:return 5;
break;
}
},
rules: [/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:(.|\s))/i,/^(?:\n)/i,/^(?:$)/i,/^(?:")/i,/^(?:")/i,/^(?:(\n|\r))/i,/^(?:[^"\r\n])/i,/^(?:$)/i,/^(?:')/i,/^(?:')/i,/^(?:(\n|\r))/i,/^(?:[^'\r\n])/i,/^(?:$)/i,/^(?:\/\/(.|$)*)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:verdadero\b)/i,/^(?:falso\b)/i,/^(?:booleano\b)/i,/^(?:entero\b)/i,/^(?:decimal\b)/i,/^(?:caracter\b)/i,/^(?:cadena\b)/i,/^(?:vacio\b)/i,/^(?:nada\b)/i,/^(?:romper\b)/i,/^(?:continuar\b)/i,/^(?:retornar\b)/i,/^(?:estructura\b)/i,/^(?:si\b)/i,/^(?:fin-si\b)/i,/^(?:es_verdadero\b)/i,/^(?:es_falso\b)/i,/^(?:repetir_mientras\b)/i,/^(?:mientras\b)/i,/^(?:hacer\b)/i,/^(?:repetir\b)/i,/^(?:repetir_contando\b)/i,/^(?:hasta_que\b)/i,/^(?:ciclo_doble_condicion\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:variable\b)/i,/^(?:enciclar\b)/i,/^(?:contador\b)/i,/^(?:evaluar_si\b)/i,/^(?:es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:publico\b)/i,/^(?:privado\b)/i,/^(?:protegido\b)/i,/^(?:@sobrescribir\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9]*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:\*=)/i,/^(?:-=)/i,/^(?:\/=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\|\|)/i,/^(?:\?\?)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:.+\s)/i,/^(?:.+$)/i,/^(?:$)/i],
conditions: {"CHAR":{"rules":[11,12,13,14],"inclusive":false},"STRING":{"rules":[6,7,8,9],"inclusive":false},"ML_COMMENT":{"rules":[1,2,3,4],"inclusive":false},"INITIAL":{"rules":[0,5,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
var string = "";
function limpiarString(){
  string="";
}
function appendString(char){
  string = string + char;
}
function getString(){
  return string;
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}